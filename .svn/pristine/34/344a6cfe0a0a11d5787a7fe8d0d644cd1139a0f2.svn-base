<?php
header("content-type:text/html;charset=utf-8");
require_once ('../inc/global.inc.php');
require_once (api_get_path ( LIBRARY_PATH ) . 'database.lib.php');
$userId = $_SESSION['_user']['user_id'];
if(!isset($userId)){
	$html = '<p style="color:red;font-weight:bold">对不起，用户会话已经过期，或者您的访问非法！</p>';
Display::display_error_message ( $html, false );
exit();
}

$port   = intval($_GET['port']);
$system = trim(getgpc('system','G'));
$str='';
$str2='';
if(isset($_GET['host']) && $_GET['host']!==''){
$str.="?host=".$_GET['host'];
if(isset($_GET['port']) && $_GET['port']!==''){
$str.="&port=".$_GET['port'];
}
}
if(isset($_GET['host']) && $_GET['host']!==''){
$str2.="host=".$_GET['host'];
if(isset($_GET['port']) && $_GET['port']!==''){
$str2.="&port=".$_GET['port'];
}
if(isset($_GET['lessonId']) && $_GET['lessonId']!==''){
$str2.="&lessonId=".trim($_GET['lessonId']);
}
if(isset($_GET['system']) && $_GET['system']!==''){
$str2.="&system=".trim($_GET['system']);
}
}

//URL访问非法
$urls=explode("?",$_SERVER['HTTP_REFERER']);
$filename=substr($urls[0],strrpos($urls[0],'/')+1);
//参数访问非法
$user_system=$_SESSION['user_system'];
$system_arr=array();
foreach($user_system as  $key => $value){
$system_arr[]=$value['system'];
}
if(api_get_setting('enable_modules', 'clay_oven') == 'false'){
if(!api_is_admin()){
if(!in_array($system, $system_arr)){
$html = '<p style="color:red;font-weight:bold">对不起，您的访问非法，请检查您的参数！</p>';
Display::display_error_message ( $html, false );
exit();
}
}
}
$sql="select user_id,port,vmid from vmtotal where proxy_port=$port";
$ress = api_sql_query ( $sql, __FILE__, __LINE__ );
$vm = Database::fetch_row ( $ress);
$sql_snap="select id from `snapshot` where `user_id`='".$vm[0]."' and  `type`=2 and `port`='".$vm[1]."' and `vmid`='".$vm[2]."' and `status`='1' ";
$dada=Database::getval( $sql_snap,__FILE__,__LINE__);

$course_code = $_GET['lessonId'];
$tbl_courseware = Database::get_course_table ( TABLE_COURSEWARE );
$sql = "SELECT * FROM $tbl_courseware WHERE cc='" . $course_code . "' and cw_type!='media'" ;
$item = Database::fetch_one_row ( $sql, false, __FILE__, __LINE__ );
$cw_type=$item['cw_type'];
switch ($cw_type) {
case 'link' :
$link_url = Security::remove_XSS ( $item ['path'] );
event_link ( $cw_id );
break;
case 'html' :
$http_www = api_get_path ( WEB_COURSE_PATH ) . api_get_course_path () . '/html';
$path=(substr($item['path'],-1)!='/'?$item['path'].'/':$item['path']);
$link_url=$http_www.$path.$item['attribute'];
break;
}
?>
<!DOCTYPE html>
<html>
<head>

    <title><?=$system?></title>

    <meta charset="utf-8">

    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <link rel="apple-touch-startup-image" href="images/screen_320x460.png" />

    <link rel="apple-touch-icon" href="images/screen_57x57.png">

    <link rel="stylesheet" href="include/base.css" title="plain">

    <script src="include/util.js"></script>
    <script src="include/jquery-1.7.2.min.js"></script>
</head>

<body style="margin: 0px;">
    <div id="noVNC_screen">
            <div id="noVNC_status_bar" class="noVNC_status_bar" style="margin-top: 0px;">
                <table border=0 width="100%"><tr>
                    <td><div id="noVNC_status" style="position: relative; height: auto;">
                        Loading
                    </div></td>
                    <td width="1%"><div id="noVNC_buttons">
                        <input type=button value="Send CtrlAltDel"
                            id="sendCtrlAltDelButton">
                        <span id="noVNC_xvp_buttons">
                        <input type=button value="Shutdown"
                            id="xvpShutdownButton">
                        <input type=button value="Reboot"
                            id="xvpRebootButton">
                        <input type=button value="Reset"
                            id="xvpResetButton">
                        </span>
                            </div></td>
                </tr></table>
            </div>
            <canvas id="noVNC_canvas" width="640px" height="20px">
                Canvas not supported.
            </canvas>
        </div>

        <script>
        /*jslint white: false */
        /*global window, $, Util, RFB, */
        "use strict";

        function openwin1() {
            var url = location.search;
            url = "<?=URL_APPEDND?>/main/cloud/snapshot_form.php"+url;
            window.open (url, "newwindow", "height=200, width=400, top=100px,left=0,toolbar=no, menubar=no, scrollbars=no, resizable=no,alwaysRaised=yes,dependent=yes,location=no, status=no,directories=no");
        }
        function openwin2() {
            var url = location.search;
            url = "<?=URL_APPEDND?>/main/cloud/rec_form.php"+url;
            window.open (url, "newwindow", "height=200, width=400, top=100px,left=0,toolbar=no, menubar=no, scrollbars=no, resizable=no,alwaysRaised=yes,dependent=yes,location=no, status=no,directories=no");
        }
        function openwin3() {
            var url = location.search;
            url = "<?=URL_APPEDND?>/main/cloud/cloudvmrec.php<?=$str?>"+url;
            window.open (url, "newwindow", "height=200, width=400, top=100px,left=0,toolbar=no, menubar=no, scrollbars=no, resizable=no,alwaysRaised=yes,dependent=yes,location=no, status=no,directories=no");
        }

        // Load supporting scripts
        Util.load_scripts(["webutil.js", "base64.js", "websock.js", "des.js",
                           "keysymdef.js", "keyboard.js", "input.js", "display.js",
                           "inflator.js", "rfb.js", "keysym.js"]);

        var rfb;
        var resizeTimeout;


        function UIresize() {
            if (WebUtil.getConfigVar('resize', false)) {
                var innerW = window.innerWidth;
                var innerH = window.innerHeight;
                var controlbarH = $D('noVNC_status_bar').offsetHeight;
                var padding = 5;
                if (innerW !== undefined && innerH !== undefined)
                    rfb.setDesktopSize(innerW, innerH - controlbarH - padding);
            }
        }
        function FBUComplete(rfb, fbu) {
            UIresize();
            rfb.set_onFBUComplete(function() { });
        }
        function passwordRequired(rfb) {
            var msg;
            msg = '<form onsubmit="return setPassword();"';
            msg += '  style="margin-bottom: 0px">';
            msg += 'Password Required: ';
            msg += '<input type=password size=10 id="password_input" class="noVNC_status">';
            msg += '<\/form>';
            $D('noVNC_status_bar').setAttribute("class", "noVNC_status_warn");
            $D('noVNC_status').innerHTML = msg;
        }
        function setPassword() {
            rfb.sendPassword($D('password_input').value);
            return false;
        }
        function sendCtrlAltDel() {
            rfb.sendCtrlAltDel();
            return false;
        }
        function xvpShutdown() {
            rfb.xvpShutdown();
            return false;
        }
        function xvpReboot() {
            rfb.xvpReboot();
            return false;
        }
        function xvpReset() {
            rfb.xvpReset();
            return false;
        }
        function updateState(rfb, state, oldstate, msg) {
            var s, sb, cad, level;
            s = $D('noVNC_status');
            sb = $D('noVNC_status_bar');
            cad = $D('sendCtrlAltDelButton');
            switch (state) {
                case 'failed':       level = "error";  break;
                case 'fatal':        level = "error";  break;
                case 'normal':       level = "normal"; break;
                case 'disconnected': level = "normal"; break;
                case 'loaded':       level = "normal"; break;
                default:             level = "warn";   break;
            }

            if (state === "normal") {
                cad.disabled = false;
            } else {
                cad.disabled = true;
                xvpInit(0);
            }

            if (typeof(msg) !== 'undefined') {
                sb.setAttribute("class", "noVNC_status_" + level);
                s.innerHTML = msg;
            }
        }

        window.onresize = function () {
            // When the window has been resized, wait until the size remains
            // the same for 0.5 seconds before sending the request for changing
            // the resolution of the session
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function(){
                UIresize();
            }, 500);
        };

        function xvpInit(ver) {
            var xvpbuttons;
            xvpbuttons = $D('noVNC_xvp_buttons');
            if (ver >= 1) {
                xvpbuttons.style.display = 'inline';
            } else {
                xvpbuttons.style.display = 'none';
            }
        }

        window.onscriptsload = function () {
            var host, port, password, path, token;

            $D('sendCtrlAltDelButton').style.display = "inline";
            $D('sendCtrlAltDelButton').onclick = sendCtrlAltDel;
            $D('xvpShutdownButton').onclick = xvpShutdown;
            $D('xvpRebootButton').onclick = xvpReboot;
            $D('xvpResetButton').onclick = xvpReset;

            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));
            document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));
            // By default, use the host and port of server that served this file
            host = WebUtil.getConfigVar('host', window.location.hostname);
            port = WebUtil.getConfigVar('port', window.location.port);

            // if port == 80 (or 443) then it won't be present and should be
            // set manually
            if (!port) {
                if (window.location.protocol.substring(0,5) == 'https') {
                    port = 443;
                }
                else if (window.location.protocol.substring(0,4) == 'http') {
                    port = 80;
                }
            }

            password = WebUtil.getConfigVar('password', '');
            path = WebUtil.getConfigVar('path', 'websockify');

            // If a token variable is passed in, set the parameter in a cookie.
            // This is used by nova-novncproxy.
            token = WebUtil.getConfigVar('token', null);
            if (token) {

                // if token is already present in the path we should use it
                path = WebUtil.injectParamIfMissing(path, "token", token);

                WebUtil.createCookie('token', token, 1)
            }

            if ((!host) || (!port)) {
                updateState(null, 'fatal', null, 'Must specify host and port in URL');
                return;
            }

            try {
                rfb = new RFB({'target':       $D('noVNC_canvas'),
                               'encrypt':      WebUtil.getConfigVar('encrypt',
                                        (window.location.protocol === "https:")),
                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),
                               'true_color':   WebUtil.getConfigVar('true_color', true),
                               'local_cursor': WebUtil.getConfigVar('cursor', true),
                               'shared':       WebUtil.getConfigVar('shared', true),
                               'view_only':    WebUtil.getConfigVar('view_only', false),
                               'onUpdateState':  updateState,
                               'onXvpInit':    xvpInit,
                               'onPasswordRequired':  passwordRequired,
                               'onFBUComplete': FBUComplete});
            } catch (exc) {
                updateState(null, 'fatal', null, 'Unable to create RFB client -- ' + exc);
                return; // don't continue trying to connect
            }

            rfb.connect(host, port, password, path);
        };
        </script>

    </body>
</html>
